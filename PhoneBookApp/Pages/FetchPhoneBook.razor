@page "/phoneBookList"

@using PhoneBookApp.Interfaces
@using PhoneBookApp.Entities

@inject IPhoneBookService phoneBookService

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<div>
    <a class="btn btn-primary"
       href='/addPhoneBook'>Добавить сотрудника</a>
</div>
<br />

@if (phoneBookList == null)
{
    <p><em>Loading...</em></p>

}
else
{
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch"
               placeholder="Поиск по фамилии..."
               class="form-control" @bind="SearchTerm"
               @bind:event="oninput" />
    </div>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("Id"))">
                    Id
                    <span class="fa @(SetSortIcon("Id"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("LastName"))">
                    Фамилия
                    <span class="fa @(SetSortIcon("LastName"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("FirstName"))">
                    Имя
                    <span class="fa @(SetSortIcon("FirstName"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("SecondName"))">
                    Отчество
                    <span class="fa @(SetSortIcon("SecondName"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("RoleName"))">
                    Должность
                    <span class="fa @(SetSortIcon("RoleName"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("DeptName"))">
                    Подразделение
                    <span class="fa @(SetSortIcon("DeptName"))"></span>
                </th>
                <th class="sort-th"
                    @onclick="@(() => SortTableAsync("Phone"))">
                    Телефон
                    <span class="fa @(SetSortIcon("Phone"))"></span>
                </th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @if (phoneBookList == null || phoneBookList.Count == 0)
            {
                <tr>
                    <td colspan="3">Нет записей для отображения</td>
                </tr>
            }
            else
            {
                foreach (var phoneBook in phoneBookList)
                {
                    <tr>
                        <td>@phoneBook.Id</td>
                        <td>@phoneBook.LastName</td>
                        <td>@phoneBook.FirstName</td>
                        <td>@phoneBook.SecondName</td>
                        <td>@phoneBook.RoleName</td>
                        <td>@phoneBook.DeptName</td>
                        <td>@phoneBook.Phone</td>
                        <td>
                            <a class="btn btn-primary"
                               href='/editPhoneBook/@phoneBook.Id'>
                                Изменить
                            </a>
                            󠀠󠀠󠀠󠀠<a class="btn btn-warning" @onclick="() => DeletePhoneBookAsync(phoneBook.Id)">
                                Удалить
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom"
                @onclick=@(async ()=>await NavigateToPageAsync("previous"))>
            ◀
        </button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton
            @(currentPage==curPage?"btn-info":"")"
                    @onclick=@(async () =>await RefreshRecordsAsync
            (currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom"
                @onclick=@(async ()=>await NavigateToPageAsync("next"))>
            ▶
        </button>
    </div>
}
@code {
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }

    List<PhoneBook> phoneBookList;

    #region Нумерация страниц

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "Id";
    string sortDir = "DESC";

    #endregion Нумерация страниц

    protected override async Task OnInitializedAsync()
    {
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;
        phoneBookList = await phoneBookService.ListAll((curPage - 1)
        * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        totalRecords = await phoneBookService.Count(searchTerm);
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    protected async Task DeletePhoneBookAsync(int id)
    {
        await phoneBookService.Delete(id);
        phoneBookList = await phoneBookService.ListAll((curPage - 1)
        * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<PhoneBook>> SortRecordsAsync(string columnName, string dir)
    {
        return await phoneBookService.ListAll((curPage - 1) *
        pageSize, pageSize, columnName, dir, searchTerm);
    }

    private async Task SortTableAsync(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            phoneBookList = await SortRecordsAsync(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                phoneBookList = await SortRecordsAsync(columnName, "DESC");
            }
            else
            {
                phoneBookList = await SortRecordsAsync(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task RefreshRecordsAsync(int currentPage)
    {
        phoneBookList = await phoneBookService.ListAll
           ((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPageAsync(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await RefreshRecordsAsync(curPage);
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }
}

